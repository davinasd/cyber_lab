5.) Offline Lab: Exploiting Broken Authentication and Session
Management

Problem Statement:
A tech startup has deployed a web application for project
management. Due to poor authentication and session management
practices, users have reported unauthorized access incidents. As a
penetration tester using Kali Linux, your task is to identify
authentication flaws, bypass login mechanisms, and hijack active
sessions.

Lab Environment Setup
1. Installing a LAMP Stack on a Local VM
The LAMP stack includes Linux, Apache, MySQL, and PHP, creating a
web server environment.
Step 1: Update System Packages
sudo apt update && sudo apt upgrade -y
Step 2: Install Apache Web Server
sudo apt install apache2 -y
• Start and enable Apache:
sudo systemctl start apache2
sudo systemctl enable apache2
• Verify installation by accessing http://localhost in a browser.
Step 3: Install MySQL Server
sudo apt install mysql-server-y
• Secure MySQL installation:

sudo mysql_secure_installation
• Follow the prompts and set a root password.
Step 4: Install PHP and Required Modules
sudo apt install php libapache2-mod-php php-mysql -y
Step 5: Restart Apache
sudo systemctl restart apache2

2. Deploying a Custom PHP-Based Login System
Step 1: Create a Project Directory
sudo mkdir/var/www/html/project_mgmt
cd /var/www/html/project_mgmt
Step 2: Configure Apache for the Project
sudo nano /etc/apache2/sites-available/project_mgmt.conf
Add the following:
<VirtualHost *:80>
ServerAdmin admin@example.com
DocumentRoot /var/www/html/project_mgmt
ServerName project.local
<Directory /var/www/html/project_mgmt>
Options Indexes FollowSymLinks
AllowOverride All
Require all granted
</Directory>
</VirtualHost>

Enable the site and restart Apache:
sudo a2ensite project_mgmt.conf
sudo systemctl restart apache2

3. Setting Up the MySQL Database
Step 1: Access MySQL Command Line
sudo mysql -u root -p
Step 2: Create a Database and User
CREATE DATABASE project_mgmt;
CREATE USER 'project_user'@'localhost' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON project_mgmt.* TO
'project_user'@'localhost';
FLUSH PRIVILEGES;
EXIT;
Step 3: Create a Table
USE project_mgmt;
CREATE TABLE users (
id INT AUTO_INCREMENT PRIMARY KEY,
username VARCHAR(50) NOT NULL,
password VARCHAR(255) NOT NULL
);
INSERT INTO users (username, password) VALUES ('admin', 'admin');
INSERT INTO users (username, password) VALUES ('user', 'user');

4. Creating the PHP Application
Step 1: Create the Login Page (login.php)
<!DOCTYPE html>
<html>
<head><title>Login</title></head>
<body>
<h2>Login Form</h2>
<form method="POST" action="authenticate.php">
Username: <input type="text" name="username" required><br>
Password: <input type="password" name="password"
required><br>
<input type="submit" value="Login">
</form>
</body>
</html>
Step 2: Create Authentication Logic (authenticate.php)
<?php
session_start();
$conn = new mysqli("localhost", "project_user", "password",
"project_mgmt");
if ($_SERVER["REQUEST_METHOD"] == "POST") {
$username = $_POST["username"];
$password = $_POST["password"];

// Vulnerable code: No hashing or prepared statements
$sql = "SELECT * FROM users WHERE username='$username' AND
password='$password'";
$result = $conn->query($sql);

if ($result->num_rows > 0) {
$_SESSION['username'] = $username;
echo "Login successful! Welcome, $username.";
} else {
echo "Invalid credentials!";
}
}
?>
Step 3: Create a Protected Dashboard (dashboard.php)
<?php
session_start();
if (!isset($_SESSION['username'])) {
die("Access denied. Please log in.");
}
?>
<!DOCTYPE html>
<html>
<head><title>Dashboard</title></head>
<body>

<h2>Welcome to the Dashboard, <?php echo
$_SESSION['username']; ?></h2>
</body>
</html>
Step 4: Test the Application
• Access the app at http://project.local/login.php.
• Test login with admin:admin or user:user.

Exploitation Scenarios
1. Credential Stuffing:
• Use default credentials: admin:admin or user:user.
2. SQL Injection Bypass:
• Use payloadslike:
• admin' OR '1'='1' --
• ``
3. Session Hijacking:
• Use developer tools in a browser to inspect cookies.
• Intercept requests using Kali’s Burp Suite orOWASP ZAP.
4. Brute Force Attack:
• Use toolslike hydra orsqlmap for automated attacks.

Security Recommendations:
• Use prepared statementsin SQL queries.
• Implement password hashing (e.g., bcrypt).

• Enable secure cookie attributes (HttpOnly, Secure, SameSite).
• Add CAPTCHA and account lockouts.
• Use multi-factor authentication (MFA).
Would you like additional sections or more advanced scenarios
included?
